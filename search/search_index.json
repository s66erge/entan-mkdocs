{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>You will find here the documentation for:</p> <ul> <li>the python + fasthtml code</li> <li>the setup and deploy tools.</li> </ul>"},{"location":"architecture/intro/","title":"Overall architecture","text":"<p>TODO wtite overall arch.</p>"},{"location":"gong-program/aaGongprog/","title":"Main gong program","text":""},{"location":"gong-program/aaGongprog/#main-program","title":"Main program","text":"<p>TODO decorator to check role in admin routes</p> <p>TODO create special page for database errors</p> file: main.py<pre><code>import secrets\nimport os\nimport socket\nimport markdown2\nimport smtplib\nimport shutil\nfrom datetime import datetime, timedelta\nfrom email.mime.text import MIMEText\nfrom fasthtml.common import *\n# from starlette.testclient import TestClient\n\ncss = Style(':root {--pico-font-size: 95% ; --pico-font-family: Pacifico, cursive;}')\n\n&lt;&lt;auth-beforeware&gt;&gt;\n\n\napp, rt = fast_app(live=True, debug=True, before=bware,hdrs=(picolink,css), title=\"Gong Users\", favicon=\"favicon.ico\")\n\n&lt;&lt;data-defi-db-md&gt;&gt;\n&lt;&lt;feedback-messages&gt;&gt;\n&lt;&lt;utilities-md&gt;&gt;\n&lt;&lt;authenticate-md&gt;&gt;\n&lt;&lt;home-page&gt;&gt;\n&lt;&lt;start-dash-md&gt;&gt;\n&lt;&lt;admin-show-md&gt;&gt;\n&lt;&lt;admin-change-md&gt;&gt;\n# client = TestClient(app)\n# print(client.get(\"/login\").text)\n\nserve()\n</code></pre>"},{"location":"gong-program/aaGongprog/#home-page","title":"Home page","text":"#home-page<pre><code>@rt('/')\ndef home():\n    return Main(\n        Div(display_markdown(\"home\")),\n        A(\"Login\",href=\"/login\", class_=\"button\"),\n        cls=\"container\")\n</code></pre> #feedback-messages<pre><code>def feedback_to_user(params):\n    # query_params = dict(request.query_params)\n    # Handle success and error messages\n    success_messages = {\n        'user_added': 'User added successfully!',\n        'center_added': 'Center added successfully!',\n        'planner_added': 'Planner association added successfully!',\n        'user_deleted': 'User deleted successfully!',\n        'center_deleted': 'Center and associated database deleted successfully!',\n        'planner_deleted': 'Planner association deleted successfully!'\n    }\n    error_messages = {\n        'missing_fields': 'Please fill in all required fields.',\n        'user_exists': 'User with this email already exists.',\n        'center_exists': 'Center with this name already exists.',\n        'planner_exists': 'This planner association already exists.',\n        'user_not_found': 'User not found.',\n        'center_not_found': 'Center not found.',\n        'invalid_role': 'Invalid role selected.',\n        'database_error': 'Database error occurred. Please try again.',\n        'db_file_exists': 'Database file with this name already exists.',\n        'template_not_found': 'Template database (mahi.db) not found.',\n        'user_has_planners': f'Cannot delete user. User is still associated with centers: {params.get(\"centers\", \"\")}. Please remove all planner associations first.',\n        'center_has_planners': f'Cannot delete center. Center is still associated with users: {params.get(\"users\", \"\")}. Please remove all planner associations first.',\n        'last_planner_for_center': f'Cannot delete planner. This is the last planner for center \"{params.get(\"center\", \"\")}\". Each center must have at least one planner.'\n    }\n    message_div = None\n    if 'success' in params:\n        message = success_messages.get(params['success'], 'Operation completed successfully!')\n        message_div = Div(P(message), style=\"color: #d1f2d1; background: #0f5132; padding: 10px; border-radius: 5px; margin: 10px 0; border: 1px solid #198754; font-weight: 500;\")\n    elif 'error' in params:\n        message = error_messages.get(params['error'], 'An error occurred.')\n        message_div = Div(P(message), style=\"color: #f8d7da; background: #842029; padding: 10px; border-radius: 5px; margin: 10px 0; border: 1px solid #dc3545; font-weight: 500;\")\n    return message_div\n</code></pre>"},{"location":"gong-program/admin-change/","title":"Admin change functions","text":"<p>Used by the admin page : admin-show.md</p> #admin-change-md<pre><code>&lt;&lt;change-users&gt;&gt;\n&lt;&lt;change-centers&gt;&gt;\n&lt;&lt;change-planners&gt;&gt;\n</code></pre> <p>TODO document admin-change</p> #change-users<pre><code>@rt('/delete_user/{email}')\ndef delete_user(session, email: str):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    try:\n        # Check if user has any planner associations\n        user_planners = planners(\"user_email = ?\", (email,))\n        if user_planners:\n            # Get the center names for the error message\n            center_names = [p.center_name for p in user_planners]\n            centers_list = \", \".join(center_names)\n            return RedirectResponse(f'/admin_page?error=user_has_planners&amp;centers={centers_list}')\n\n        # If no planner associations, proceed with deletion\n        db.execute(\"DELETE FROM users WHERE email = ?\", (email,))\n        return RedirectResponse('/admin_page?success=user_deleted')\n    except Exception as e:\n        return Main(\n            Nav(Li(A(\"Admin\", href=\"/admin_page\"))),\n            Div(H1(\"Error\"), P(f\"Could not delete user: {str(e)}\")),\n            cls=\"container\"\n        )\n\n@rt('/add_user')\ndef post(session, new_user_email: str = \"\", role_name: str =\"\"):\n    # print(f\"email: {new_user_email}, role: {role_name}\")\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    try:\n        if new_user_email == \"\" or role_name == \"\":\n            message = {\"error\" : \"missing_fields\"}\n\n        # Validate role\n        elif not roles(\"role_name = ?\", (role_name,)):\n            message = {\"error\": \"invalid_role\"}\n\n        # Check if user already exists\n        elif users(\"email = ?\", (new_user_email,)):\n            message = {\"error\": \"user_exists\"}\n\n        # Add new user\n        else:\n            users.insert(\n            email=new_user_email,\n            name=new_user_email.split('@')[0],  # Use email prefix as default name\n            role_name=role_name,\n            is_active=False,\n            magic_link_token=None,\n            magic_link_expiry=None\n            )\n            message = {\"success\": \"user_added\"}\n\n        #return RedirectResponse('/admin_page?success=user_added')\n        return Div(\n            Div(feedback_to_user(message)),\n            Div(show_users_table(), hx_swap_oob=\"true\", id=\"users-table\") if \"success\" in message else None,\n            Div(show_users_form(), hx_swap_oob=\"true\", id=\"users-form\")\n        )\n    except Exception as e:\n        #return RedirectResponse('/admin_page?error=database_error')\n        return Div(\n            Div(feedback_to_user({\"error\": \"database_error\"})),\n            Div(show_users_form(), hx_swap_oob=\"true\", id=\"users-form\")\n        )\n</code></pre> #change-centers<pre><code>@rt('/delete_center/{center_name}')\ndef delete_center(session, center_name: str):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    try:\n        # Get the center info to find the database file\n        center_info = centers(\"center_name = ?\", (center_name,))\n        if not center_info:\n            return RedirectResponse('/admin_page?error=center_not_found')\n\n        # Check if center has any planner associations\n        center_planners = planners(\"center_name = ?\", (center_name,))\n        if center_planners:\n            # Get the user emails for the error message\n            user_emails = [p.user_email for p in center_planners]\n            users_list = \", \".join(user_emails)\n            return RedirectResponse(f'/admin_page?error=center_has_planners&amp;users={users_list}')\n\n        gong_db_name = center_info[0].gong_db_name\n        db_path = f'data/{gong_db_name}'\n\n        # If no planner associations, proceed with deletion\n        db.execute(\"DELETE FROM centers WHERE center_name = ?\", (center_name,))\n\n        # Finally, delete the associated database file if it exists\n        if os.path.exists(db_path):\n            os.remove(db_path)\n            # Also remove any SQLite journal files\n            for ext in ['-shm', '-wal']:\n                journal_file = db_path + ext\n                if os.path.exists(journal_file):\n                    os.remove(journal_file)\n\n        return RedirectResponse('/admin_page?success=center_deleted')\n    except Exception as e:\n        return Main(\n            Nav(Li(A(\"Admin\", href=\"/admin_page\"))),\n            Div(H1(\"Error\"), P(f\"Could not delete center: {str(e)}\")),\n            cls=\"container\"\n        )\n\n@rt('/add_center')\ndef add_center(session, new_center_name: str, new_gong_db_name: str):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    if not new_center_name or not new_gong_db_name:\n        return RedirectResponse('/admin_page?error=missing_fields')\n\n    try:\n        # Check if center already exists\n        existing_center = centers(\"center_name = ?\", (new_center_name,))\n        if existing_center:\n            return RedirectResponse('/admin_page?error=center_exists')\n\n        # Ensure gong_db_name ends with .db\n        if not new_gong_db_name.endswith('.db'):\n            new_gong_db_name += '.db'\n\n        # Check if database file already exists\n        db_path = f'data/{new_gong_db_name}'\n        if os.path.exists(db_path):\n            return RedirectResponse('/admin_page?error=db_file_exists')\n\n        # Copy mahi.db as template for new center\n        template_db = 'data/mahi.db'\n        if not os.path.exists(template_db):\n            return RedirectResponse('/admin_page?error=template_not_found')\n\n        # Create the new database by copying mahi.db\n        shutil.copy2(template_db, db_path)\n\n        # Add new center to the centers table\n        centers.insert(\n            center_name=new_center_name,\n            gong_db_name=new_gong_db_name\n        )\n        return RedirectResponse('/admin_page?success=center_added')\n    except Exception as e:\n        return RedirectResponse('/admin_page?error=database_error')\n</code></pre> #change-planners<pre><code>@rt('/delete_planner/{user_email}/{center_name}')\ndef delete_planner(session, user_email: str, center_name: str):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    try:\n        # Check how many planners are associated with this center\n        center_planners = planners(\"center_name = ?\", (center_name,))\n\n        # If this is the only planner for this center, prevent deletion\n        if len(center_planners) &lt;= 1:\n            return RedirectResponse(f'/admin_page?error=last_planner_for_center&amp;center={center_name}')\n\n        # If there are other planners for this center, proceed with deletion\n        db.execute(\"DELETE FROM planners WHERE user_email = ? AND center_name = ?\", (user_email, center_name))\n        return RedirectResponse('/admin_page?success=planner_deleted')\n    except Exception as e:\n        return Main(\n            Nav(Li(A(\"Admin\", href=\"/admin_page\"))),\n            Div(H1(\"Error\"), P(f\"Could not delete planner association: {str(e)}\")),\n            cls=\"container\"\n        )\n\n@rt('/add_planner')\ndef add_planner(session, new_planner_user_email: str, new_planner_center_name: str):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return RedirectResponse('/dashboard')\n\n    if not new_planner_user_email or not new_planner_center_name:\n        return RedirectResponse('/admin_page?error=missing_fields')\n\n    try:\n        # Check if user exists\n        user_exists = users(\"email = ?\", (new_planner_user_email,))\n        if not user_exists:\n            return RedirectResponse('/admin_page?error=user_not_found')\n\n        # Check if center exists\n        center_exists = centers(\"center_name = ?\", (new_planner_center_name,))\n        if not center_exists:\n            return RedirectResponse('/admin_page?error=center_not_found')\n\n        # Check if planner association already exists\n        existing_planner = planners(\"user_email = ? AND center_name = ?\", (new_planner_user_email, new_planner_center_name))\n        if existing_planner:\n            return RedirectResponse('/admin_page?error=planner_exists')\n\n        # Add new planner association\n        planners.insert(\n            user_email=new_planner_user_email,\n            center_name=new_planner_center_name\n        )\n        return RedirectResponse('/admin_page?success=planner_added')\n    except Exception as e:\n        return RedirectResponse('/admin_page?error=database_error')\n</code></pre>"},{"location":"gong-program/admin-show/","title":"Admin page","text":"<p>Will only be reachable for signed in admin users.</p> #admin-show-md<pre><code>&lt;&lt;show-users&gt;&gt;\n&lt;&lt;show-centers&gt;&gt;\n&lt;&lt;show-planners&gt;&gt;\n&lt;&lt;admin-page&gt;&gt;\n</code></pre> <p>TODO document admin-show</p> <p>TODO show tables sorted by key</p> #admin-page<pre><code>@rt('/admin_page')\ndef admin(session, request):\n    sessemail = session['auth']\n    u = users[sessemail]\n    if u.role_name != \"admin\":\n        return Main(\n            Nav(Li(A(\"Dashboard\", href=\"/dashboard\"))),\n            Div(H1(\"Access Denied\"),\n                P(\"You do not have permission to access this page.\")),\n            cls=\"container\")\n    params = dict(request.query_params)\n    return Main(\n        Nav(\n            Ul(\n                Li(A(\"Dashboard\", href=\"/dashboard\")),\n                Li(A(\"Contact\", href=\"#\")),\n                Li(A(\"About\", href=\"#\")),\n            ), \n            Button(\"Logout\", hx_post=\"/logout\"),\n        ),\n        Div(display_markdown(\"admin-show\")),\n        feedback_to_user(params),\n\n        H2(\"Users\"),\n        Div(feedback_to_user(params), id=\"users-feedback\"),\n        Div(show_users_table(), id=\"users-table\"),\n        H4(\"Add New User\"),\n        Div(show_users_form(), id=\"users-form\"),\n\n        show_centers(),\n        show_planners(),\n        cls=\"container\",\n    )\n</code></pre> #show-users<pre><code>def show_users_table():\n    return Main(\n        Table(\n            Thead(\n                Tr(Th(\"Email\"), Th(\"Name\"), Th(\"Role\"), Th(\"Active\"), Th(\"Action\"))\n            ),\n            Tbody(\n                *[Tr(\n                    Td(u.email), \n                    Td(u.name or \"\"), \n                    Td(u.role_name), \n                    Td(\"Yes\" if u.is_active else \"No\"),\n                    Td(A(\"Delete\", href=f\"/delete_user/{u.email}\", \n                        onclick=\"return confirm('Are you sure you want to delete this user?')\"))\n                ) for u in users()]\n            )\n        )\n    )\n\n\ndef show_users_form():\n    role_names = [r.role_name for r in roles()]\n    return Main(\n       Div(\n            Form(\n                Input(type=\"email\", placeholder=\"User Email\", name=\"new_user_email\", required=True),\n                Select( \n                    Option(\"Select Role\", value=\"\", selected=True, disabled=True),\n                    *[Option(role, value=role) for role in role_names],\n                        name=\"role_name\", required=True),\n                #Button(\"Add User\", type=\"submit\"), method=\"post\", action=\"/add_user\"\n                Button(\"Add User\", type=\"submit\"), hx_post=\"/add_user\",hx_target=\"#users-feedback\"\n            )\n        )    \n    )\n</code></pre> #show-centers<pre><code>def show_centers():\n    return Main(\n        Div(\n        H2(\"Centers\"),\n        Table(\n            Thead(\n                Tr(Th(\"Center Name\"), Th(\"Gong DB Name\"), Th(\"Actions\"))\n            ),\n            Tbody(\n                *[Tr(\n                    Td(c.center_name), \n                    Td(c.gong_db_name), \n                    Td(A(\"Delete\", href=f\"/delete_center/{c.center_name}\",\n                        onclick=\"return confirm('Are you sure you want to delete this center?')\"))\n                    ) for c in centers()]\n                )\n            )\n        ),\n        Div(\n            H4(\"Add New Center\"),\n            Form(\n                Input(type=\"text\", placeholder=\"Center Name\", name=\"new_center_name\", required=True),\n                Input(type=\"text\", placeholder=\"Gong DB Name (without .db)\", name=\"new_gong_db_name\", required=True),\n                Small(\"The database file will be created as a copy of mahi.db\"),\n                Button(\"Add Center\", type=\"submit\"), method=\"post\", action=\"/add_center\"\n            )\n        )\n    )\n</code></pre> #show-planners<pre><code>def show_planners():\n    return Main(\n        Div(\n            H2(\"Planners\"),\n            Table(\n                Thead(\n                    Tr(Th(\"User Email\"), Th(\"Center Name\"), Th(\"Actions\"))\n                ),\n                Tbody(\n                    *[Tr(\n                        Td(p.user_email), \n                        Td(p.center_name), \n                        Td(A(\"Delete\", href=f\"/delete_planner/{p.user_email}/{p.center_name}\",\n                             onclick=\"return confirm('Are you sure you want to delete this planner association?')\"))\n                    ) for p in planners()]\n                )\n            )\n        ),\n        Div(\n            H4(\"Add New Planner\"),\n            Form(\n                Select(\n                    Option(\"Select User\", value=\"\", selected=True, disabled=True),\n                    *[Option(u.email, value=u.email) for u in users()],\n                    name=\"new_planner_user_email\", required=True\n                ),\n                Select(\n                    Option(\"Select Center\", value=\"\", selected=True, disabled=True),\n                    *[Option(c.center_name, value=c.center_name) for c in centers()],\n                    name=\"new_planner_center_name\", required=True\n                ),\n                Button(\"Add Planner\", type=\"submit\"),\n                method=\"post\",\n                action=\"/add_planner\"\n            )\n        )\n    )\n</code></pre>"},{"location":"gong-program/authenticate/","title":"Authentication","text":"<p>This is a passwordless authentication:</p> <ul> <li>The user enters their email on a website</li> <li>The website generates a random string (a \"token\") and saves it together with the user's email into a database</li> <li>The website sends an email to the user with a link that encodes the generated token</li> <li>The user clicks on the link</li> <li>The website looks for a record in the users database table with the token from the link</li> <li>If it can find a record, the user will be logged in (again by storing information in the session)</li> </ul> #authenticate-md<pre><code>&lt;&lt;build-serve-login-form&gt;&gt;\n&lt;&lt;handling-form&gt;&gt;\n&lt;&lt;send-link&gt;&gt;\n&lt;&lt;verify-token&gt;&gt;\n&lt;&lt;logout&gt;&gt;\n</code></pre>"},{"location":"gong-program/authenticate/#login-form","title":"Login form","text":"<p>The actual form element is extracted into a MyForm() function. Its not really needed this time, since we don't use it a second time!</p> #build-serve-login-form<pre><code>def MyForm(btn_text: str, target: str):\n   return Form(\n       Div(\n           Div(\n               Input(id='email', type='email', placeholder='foo@bar.com'),\n           ),\n       ),\n       Button(btn_text, type=\"submit\", id=\"submit-btn\"),\n       P(id=\"error\"),\n       hx_post=target,\n       hx_target=\"#error\",\n       hx_disabled_elt=\"#submit-btn\"\n   )\n\n@rt('/login')\ndef get():   \n   return Main(\n       Div(\n           H1(\"Sign In\"),\n           P(\"Enter your email to sign in to The App.\"),\n           MyForm(\"Sign In with Email\", \"/create_magic_link\")\n       ), cls=\"container\"\n   )\n</code></pre>"},{"location":"gong-program/authenticate/#handling-the-login-form","title":"Handling the login form","text":"<p>This handler first checks if the email is present. If its not, it returns an error that will be swapped into the #error paragraph in the form by HTMX, just like last time.</p> <p>We create a magic_link_token using the secrets package from the python standard library. This token is a 32 characters long string. Also we generate an expiry date, which lies 15 minutes in the future.</p> <p>The token should only be valid for a certain amount of time to increase the security of the authentication system.</p> <p>Then it tries to find a user with the given email and if there is no user with this email, the IndexError is raised and it returns an error like above.</p> <p>Another option would be to create a new user now by replacing:</p> <pre><code>return \"Email is not registered ...\"\n</code></pre> <p>with:</p> <pre><code>user = User(email=email, is_active=False, magic_link_token=magic_link_token, magic_link_expiry=magic_link_expiry)\nusers.insert(user)\n</code></pre> <p>Then we update the user row in the database with the expiration date and the token itself.</p> <p>Then we create the login link by adding the token to the base url. If we are from Railway production, os.name == 'posix' and the base URL is saved in the RAILWAY_PUBLIC_DOMAIN environment variable. If we are running locally (os.name == 'nt'), directly or within railway CLI, the base URL is http://localhost:5001.</p> <p>If everything went well, we return a success message to the user. Remember, the form has been defined to swap the content of the #error paragraph. Since I want to change the appearance of the text we send back, I also send back a HX-Reswap header with the value outerHTML. This tells HTMX to swap the outer HTML of the #error html element with the content we send back, a paragraph tag with the success message.</p> <p>Also I want to disable the submit button and show a message that the magic link has been sent. To do this, we use one of the most powerful features of HTMX, out-of-band swaps. In HTMX you can update more than one piece of UI by setting the hx-swap-oob attribute to true on an element. HTMX will then swap in the returned element at the location of the element with the same id (#submit-btn in this case). You can read more about HTMX's out-of-band swaps here.</p> #handling-form<pre><code>@rt('/create_magic_link')\ndef post(email: str):\n    if not email:\n       return \"Email is required\"\n\n    magic_link_token = secrets.token_urlsafe(32)\n    magic_link_expiry = datetime.now() + timedelta(minutes=15)\n    try:\n       user = users[email]\n       users.update(email= email, magic_link_token= magic_link_token, magic_link_expiry= magic_link_expiry)\n    except NotFoundError:\n        return \"Email is not registered, try again or send a message to xxx@xxx.xx to get registered\"\n\n    domainame = os.environ.get('RAILWAY_PUBLIC_DOMAIN', None)\n\n    if (not isa_dev_computer()) and (domainame is not None):\n        base_url = 'https://' + os.environ.get('RAILWAY_PUBLIC_DOMAIN')\n    else: \n        print(\" machine name: \" + socket.gethostname())\n        base_url = 'http://localhost:5001'\n\n    magic_link = f\"{base_url}/verify_magic_link/{magic_link_token}\"\n    send_magic_link_email(email, magic_link)\n\n    return P(\"A link to sign in has been sent to your email. Please check your inbox. The link will expire in 15 minutes.\", id=\"success\"), HttpHeader('HX-Reswap', 'outerHTML'), Button(\"Magic link sent\", type=\"submit\", id=\"submit-btn\", disabled=True, hx_swap_oob=\"true\")\n</code></pre>"},{"location":"gong-program/authenticate/#send-the-magic-link","title":"Send the magic link","text":"<p>Now we only need to send an email to the user with the link. The link then sends a get request to the /verify_magic_link/{token} endpoint.</p> <p>In production mode - remote or local within railway CLI -, we can use the smtplib via send_email (in utilities.md) to send an email using Gmail's SMTP server. </p> <p>In dev mode, lets just mock sending the email by printing the email content to the console.</p> #send-link<pre><code>def send_magic_link_email(email_address: str, magic_link: str):\n\n   email_subject = \"Sign in to The App\"\n   email_text = f\"\"\"\n   Hey there,\n\n   Click this link to sign in to The App: {magic_link}\n\n   If you didn't request this, just ignore this email.\n\n   Cheers,\n   The App Team\n   \"\"\"\n   email_sender = os.environ.get('GOOGLE_SMTP_USER','None')\n   if email_sender == 'None':\n       print(f'To: {email_address}\\n Subject: {email_subject}\\n\\n{email_text}')\n   else:\n       send_email(email_subject, email_text, [email_address])\n</code></pre>"},{"location":"gong-program/authenticate/#authenticate-the-user","title":"Authenticate the user","text":"<p>We save the current time into the variable now, because we need to look whether the token is already expired. Then we retrieve the first item with the specified token and an expiration date that lies in the future from the users table.</p> <p>There should only be one or no user coming back from this query, so we wrap this whole code in a try/catch block.</p> <p>If a user has been found using this query, we will save his or hers email in the auth key of our session dictionary. If its the first time the user logs in, we set is_active to true for this database record.</p> <p>We do this to keep our database clean. Imagine a hacker enters thousands of random email addresses into our beautiful sign in form and therefore creates thousands of records in our database. To keep our database clean, we can use this is_active column to delete all inactive database records periodically using cron jobs.</p> #verify-token<pre><code>@rt('/verify_magic_link/{token}')\ndef get(session, token: str):\n   nowstr = f\"'{datetime.now()}'\"\n   try:\n       user = users(\"magic_link_token = ? AND magic_link_expiry &gt; ?\", (token, nowstr))[0]\n       session['auth'] = user.email\n       users.update(email= user.email, magic_link_token= None, magic_link_expiry= None, is_active= True)\n       return RedirectResponse('/dashboard')\n   except IndexError:\n       return \"Invalid or expired magic link\"\n</code></pre>"},{"location":"gong-program/authenticate/#beforeware-to-restrict-access","title":"Beforeware to restrict access","text":"<p>We need a page that is only accessible for authenticated users and a mechanism to restrict the access to this page for non-authenticated users. We will use FastHTMLs concept of beforeware for restricting access.</p> <p>Here we define a function called before that takes in the request and saves whatever in the auth key of the session into the auth variable as well as the scope of the request. The request scope is something that comes from ASGI, the underlying webserver technology of FastHTML. Think of it as a kind of metadata or context of the request.</p> <p>If there is nothing in session[\"auth\"], auth will evaluate to False and we will redirect the user to the login page.</p> <p>Then well define a Beforeware object with our newly defined before function. This will make sure that every request runs first through our function, unless its targeting one of the paths we define in the skip list. Everything else will be guarded by this Beforeware. Now we just need to pass our newly created Beforeware class to our fast_app function as the beforeware argument:</p> <p>app, rt = fast_app(..., before=bware)</p> #auth-beforeware<pre><code>login_redir = RedirectResponse('/login', status_code=303)\n\ndef before(req, session):\n   auth = req.scope['auth'] = session.get('auth', None)\n   if not auth: return login_redir\n\nbware = Beforeware(before, skip=[r'/favicon\\.ico', r'/static/.*', r'.*\\.css', '/login','/', '/create_magic_link', r'/verify_magic_link/.*'])\n</code></pre> #logout<pre><code>@rt('/logout')\ndef post(session):\n    del session['auth']\n    return HttpHeader('HX-Redirect', '/login')\n</code></pre>"},{"location":"gong-program/dashboard/","title":"User pages","text":"<p>Will only be reachable for users who are signed in.</p> #start-dash-md<pre><code>&lt;&lt;dashboard&gt;&gt;\n</code></pre> #dashboard<pre><code>@rt('/dashboard')\ndef get(session): \n    sessemail = session['auth']\n    u = users[sessemail]\n    centers = planners(\"user_email = ?\", (u.email,))\n    center_names = \", \".join(c.center_name for c in centers)\n    return Main(\n        Nav(\n            Ul(\n                Li(A(\"Admin\", href=\"/admin_page\")) if u.role_name == \"admin\" else None ,\n                Li(A(\"Contact\", href=\"#\")),\n                Li(A(\"About\", href=\"#\")),\n            ), \n            Button(\"Logout\", hx_post=\"/logout\"),\n        ),\n        Div(H1(\"Dashboard\"), P(f\"You are logged in as '{u.email}' with role '{u.role_name}' and access to gong planning for center(s) : {center_names}.\")),\n        cls=\"container\",\n    )\n\n@rt('/unfinished')\ndef unfinished():\n    return Main(\n        Nav(Li(A(\"Dashboard\", href=\"/dashboard\"))),\n        Div(H1(\"This feature is not yet implemented.\")),\n        cls=\"container\"\n    )\n</code></pre>"},{"location":"gong-program/data-def-db/","title":"Data definitions and databases","text":"#data-defi-db-md<pre><code>&lt;&lt;setup-database&gt;&gt;\n&lt;&lt;initialize-database&gt;&gt;\n</code></pre>"},{"location":"gong-program/data-def-db/#admin-database","title":"Admin database","text":"<p>The admin database is used to manage users, centers, and planners for gong planning. It has the following entities:</p> <p>ROLES: - admin for modifying USERS / CENTERS / PLANNERS, and also gong planning  - user for gong planning only</p> <p>USERS: - authenticated by sending a \"magic link\" to their email address : see \"authenticate.md\"</p> <p>CENTERS: - with the gong database name for this center</p> <p>PLANNERS: - indicates which user(s) can modify the gong planning of which center </p> <pre><code>erDiagram\n\n    ROLES { \n        string role_name PK\n        text description\n    }\n\n    USERS  }o--|| ROLES : \"has role\"\n    USERS {\n        string email PK\n        string name\n        string role_name FK\n        string magic_link_token\n        timestamp magic_link_expiry\n        boolean is_active\n    }\n\n    CENTERS {\n        string center_name PK\n        string gong_db_name\n    }\n\n    USERS ||--o{ PLANNERS : creates\n    PLANNERS }o--|| CENTERS : for\n    PLANNERS {\n        string user_email PK, FK\n        string center_name PK, FK\n    }</code></pre>"},{"location":"gong-program/data-def-db/#gong-databases","title":"Gong databases","text":"<p>One gong database is used to store the gong planning data for each center. Each gong database name is referenced in the CENTERS table above. All gong databases have the same structure detailed here below, but their content will vary from center to center.</p> <p>As of today, this app is managing the gong planning for:</p> <ul> <li>Dhamma Mahi (mahi.db)</li> <li>Dhamma Pajjota (pajjota.db)</li> </ul> <p>TODO describe the entities</p> <pre><code>erDiagram\n\n    COMING_PERIODS  }o--|| PERIOD_TYPES : \"is\"\n    COMING_PERIODS { \n        date start_date PK\n        string period_type FK \n   }\n\n    PERIOD_TYPES { \n        string period_type PK \"e.g.: '10 days', 'Service','Trust WE' ...\"\n        string struct_table \"name of the STRUCTURE table\"\n        string tt_table \"name of the TIMINGS table\"\n    }\n\n    PERIOD_TYPES ||--|| STRUCTURE : \"has this structure table\"\n    STRUCTURE {\n        int day_sequence PK \"sequence of day: 0, 1, 2, ...\"\n        string day_type FK \"'day 0', 'course day', 'last day'\"\n        }\n\n    PERIOD_TYPES ||--|| TIMINGS : \"has timings in this table\"\n    STRUCTURE  }o--o{ TIMINGS : \"day type has these timings\"\n    TIMINGS {\n        string day_type FK\n        time gong_time\n        int gong_sound\n        boolean automatic_gong\n        string gong_description\n    }</code></pre>"},{"location":"gong-program/data-def-db/#database-setup","title":"Database setup","text":"#setup-database<pre><code>db = database('data/gongUsers.db')\n\nSQL_CREATE_ROLES = \"\"\"\nCREATE TABLE IF NOT EXISTS roles (\n    role_name TEXT PRIMARY KEY,\n    description TEXT\n);\n\"\"\"\n\nSQL_CREATE_CENTERS = \"\"\"\nCREATE TABLE IF NOT EXISTS centers (\n    center_name TEXT PRIMARY KEY,\n    gong_db_name TEXT\n);\n\"\"\"\n\nSQL_CREATE_USERS = \"\"\"\nCREATE TABLE IF NOT EXISTS users (\n    email TEXT PRIMARY KEY,\n    name TEXT,\n    role_name TEXT,\n    magic_link_token TEXT,\n    magic_link_expiry TIMESTAMP,\n    is_active BOOLEAN DEFAULT FALSE,\n    FOREIGN KEY (role_name) REFERENCES roles(role_name)\n);\n\n\"\"\"\n\nSQL_CREATE_PLANNERS = \"\"\"\nCREATE TABLE IF NOT EXISTS planners (\n    user_email TEXT,\n    center_name TEXT,\n    PRIMARY KEY (user_email, center_name),\n    FOREIGN KEY (user_email) REFERENCES users(email),\n    FOREIGN KEY (center_name) REFERENCES centers(center_name)\n);\n\"\"\"\n\ndb.execute(SQL_CREATE_ROLES)\ndb.execute(SQL_CREATE_CENTERS)\ndb.execute(SQL_CREATE_USERS)\ndb.execute(SQL_CREATE_PLANNERS)\n\nusers = db.t.users\nroles = db.t.roles\ncenters = db.t.centers\nplanners = db.t.planners\n\nRole = roles.dataclass()\nCenter = centers.dataclass()\nPlanner = planners.dataclass()\nUser = users.dataclass()\n</code></pre>"},{"location":"gong-program/data-def-db/#database-initialization","title":"Database initialization","text":"<p>Check if any table(s) is(are) empty and insert default values if needed</p> #initialize-database<pre><code>if not roles():\n    roles.insert(role_name=\"admin\", description=\"administrator\")\n    roles.insert(role_name=\"user\", description=\"regular user\")\n\nif not centers():\n    centers.insert(center_name=\"Mahi\", gong_db_name=\"mahi.db\")\n    centers.insert(center_name=\"Pajjota\", gong_db_name=\"pajjota.db\")\n\nif not users():\n    users.insert(email=\"spegoff@authentica.eu\", name=\"sp1\", role_name=\"admin\", is_active=True, magic_link_token=None, magic_link_expiry=None)\n    users.insert(email=\"spegoff@gmail.com\", name=\"sp2\", role_name=\"user\", is_active=True)\n\nif not planners():\n    planners.insert(user_email= \"spegoff@authentica.eu\", center_name= \"Mahi\")\n    planners.insert(user_email= \"spegoff@gmail.com\", center_name= \"Pajjota\")\n</code></pre>"},{"location":"gong-program/utilities/","title":"Utilities","text":"<ul> <li>checking if the program runs on a development machine</li> <li>sending an email</li> <li>displaying the content of a markdown file</li> </ul> #utilities-md<pre><code>&lt;&lt;isa-dev-computer&gt;&gt;\n&lt;&lt;send-email&gt;&gt;\n&lt;&lt;display-markdown&gt;&gt;\n</code></pre>"},{"location":"gong-program/utilities/#check-if-the-current-computer-is-a-development-machine","title":"Check if the current computer is a development machine","text":"<p>This function checks if the program runs on one of a predefined list of development machines. This is useful to determine whether to use a local or remote base URL for building the registation link.</p> #isa-dev-computer<pre><code>DEV_COMPUTERS = [\"ASROCK-MY-OFFICE\",\"DESKTOP-UIPS8J2\",\"serge-virtual-linuxmint\",\"serge-framework\"]\ndef isa_dev_computer():\n    hostname = socket.gethostname()\n    return hostname in DEV_COMPUTERS\n</code></pre>"},{"location":"gong-program/utilities/#send-email-via-google-smtp","title":"Send email via Google smtp","text":"<p>We will need to create an App Password in your Google Account settings as we have 2-Step Verification enabled.</p> <p>Example for using: send_email(subject, body, recipients)</p> <ul> <li>subject = \"Hello from Python\"</li> <li>body = \"This is a test email sent from Python using Gmail SMTP.\"</li> <li>recipients = [\"recipient1@gmail.com\"]  : list of recipients </li> </ul> #send-email<pre><code>def send_email(subject, body, recipients):\n    sender = os.environ.get('GOOGLE_SMTP_USER') \n    password = os.environ.get('GOOGLE_SMTP_PASS')\n    # Create MIMEText email object with the email body\n    msg = MIMEText(body)\n    msg['Subject'] = subject\n    msg['From'] = sender\n    msg['To'] = ', '.join(recipients)\n    # Connect securely to Gmail SMTP server and login\n    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:\n        smtp_server.login(sender, password)\n        smtp_server.sendmail(sender, recipients, msg.as_string())\n    print(\"Message sent!\")\n</code></pre>"},{"location":"gong-program/utilities/#displaying-the-content-of-a-markdown-file","title":"Displaying the content of a markdown file","text":"<p>This function reads a markdown file name, without the extension '.md', then finds the file in the 'md-text' directory and converts it to HTML using the <code>markdown2</code> library, which is then returned as a NotStr object for rendering in the app.</p> #display-markdown<pre><code>def display_markdown(file_name:str):\n    with open(f'md-text/{file_name}.md', \"r\") as f:\n        html_content = markdown2.markdown(f.read())\n    return NotStr(html_content)\n</code></pre>"},{"location":"setup-deploy/a-python-environ/","title":"The python environment","text":"<p>Make sure this computer will be recognized by name as a dev machine : see isa_dev_computer() in utilities.md !!!</p> <p>To set up and manage the virtual Python environment for this project, we use the uv tool.</p> <p>VSCode extensions:</p> <ul> <li>Python (from Microsoft)</li> </ul>"},{"location":"setup-deploy/a-python-environ/#windows","title":"Windows","text":""},{"location":"setup-deploy/a-python-environ/#initial-installation","title":"Initial installation","text":"file: setup/environ.ps1<pre><code>scoop install main/uv\nuv python install\nuv venv\nuv pip install -r requirements.txt\n</code></pre>"},{"location":"setup-deploy/a-python-environ/#vscode-startup","title":"VSCode startup","text":"file: setup/startup.ps1<pre><code>.venv\\Scripts\\activate.ps1\n</code></pre>"},{"location":"setup-deploy/a-python-environ/#linux-mint","title":"Linux Mint","text":""},{"location":"setup-deploy/a-python-environ/#initial-installation_1","title":"Initial installation","text":"file: setup/environ.sh<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\nuv python install\nuv venv\nuv pip install -r requirements.txt\n</code></pre>"},{"location":"setup-deploy/a-python-environ/#vscode-startup_1","title":"VSCode startup","text":"<pre><code>source .venv/bin/activate\n</code></pre>"},{"location":"setup-deploy/a-python-environ/#command","title":"command","text":"<p>python main.py</p>"},{"location":"setup-deploy/entangled/","title":"Entangled","text":"<p>Entangled is a tool to manage code snippets in Markdown files. It allows you to tangle code from Markdown files into separate source files and stitch changes back into the Markdown files. For full documentation visit:</p> <ul> <li>user documentation</li> <li>installation / configuration.</li> </ul> <p>Pandoc needs to be installed for Entangled.</p> <p>VSCode extensions:</p> <ul> <li>Markdown All in One</li> <li>Markdown Preview Enhanced</li> <li>Entangled VSCode : helps for editing the entangled files.</li> </ul>"},{"location":"setup-deploy/entangled/#initial-installation","title":"Initial Installation","text":""},{"location":"setup-deploy/entangled/#windows","title":"Windows","text":"file: setup/entangled.ps1<pre><code>scoop install pandoc\nuv pip install entangled-cli\n</code></pre>"},{"location":"setup-deploy/entangled/#linux-mint","title":"Linux Mint","text":"file: setup/entangled.sh<pre><code>sudo apt install pandoc\nuv pip install entangled-cli\n</code></pre>"},{"location":"setup-deploy/entangled/#commands","title":"Commands","text":"<p>see: entangled --help</p> <p>usage: entangled [-h] [-d] [-v] {tangle,stitch,sync,watch,status} ...</p> <p>positional arguments: {tangle,stitch,sync,watch,status}</p> <p>tangle</p> <ul> <li>Tangle codes from Markdown</li> <li>[-h], [-s] only show, [--force] force tangle</li> <li>[-r] rebuild file data base </li> </ul> <p>stitch</p> <ul> <li>Stitch code changes back into the Markdown</li> <li>[-h], [--force] force stitch, [-s] </li> </ul> <p>sync : Be smart wether to tangle or stich</p> <p>watch : Keep a loop running, watching for changes.</p> <ul> <li>! does not work on windows !</li> <li>replaced by 'winwatch.ps1':</li> <li>watches changes on markdown file in \\doc + main.py</li> <li>triggers a 'entangled sync' on these files change</li> <li>documented inside the file </li> </ul> <p>status</p> <p>options:</p> <ul> <li>h, --help            show this help message and exit</li> <li>d, --debug           enable debug messages</li> <li>v, --version         show version number</li> </ul>"},{"location":"setup-deploy/entangled/#configuration","title":"Configuration","text":"file: entangled.toml<pre><code>version = \"2.0\"\nwatch_list = [\"docs/**/*.md\"]\nhooks = [\"build\"]\n\n#[markers]\n#open=\"^(?P&lt;indent&gt;\\\\s*)```(?P&lt;properties&gt;.*)$\"\n#close=\"^(?P&lt;indent&gt;\\\\s*)```\\\\s*$\"\n\n[[languages]]\nname = \"Powershell\"\nidentifiers =  [\"powershell\", \"pwsh\"]\ncomment = { open = \"#\" }\n\n[[languages]]\nname = \"XML\"\nidentifiers = [\"xml\", \"html\", \"svg\"]\ncomment = { open = \"&lt;!--\", close = \"--&gt;\" }\n\n[[languages]]\nname = \"mermaid\"\nidentifiers =  [\"mermaid\"]\ncomment = { open = \"%%\" }\n\n[[languages]]\nname = \"yaml\"\nidentifiers =  [\"yaml\"]\ncomment = { open = \"#\" }\n\n[[languages]]\nname = \"toml\"\nidentifiers =  [\"toml\"]\ncomment = { open = \"#\" }\n</code></pre>"},{"location":"setup-deploy/mkdocs/","title":"MkDocs","text":"<p>MkDocs is a static site generator that's geared towards project documentation. It takes Markdown files and builds them into a static website. For full documentation visit mkdocs.org.</p>"},{"location":"setup-deploy/mkdocs/#initial-installation","title":"Initial Installation","text":""},{"location":"setup-deploy/mkdocs/#windows","title":"Windows","text":"file: setup/mkdocs.ps1<pre><code>uv pip install mkdocs\nuv pip install mkdocs-mermaid2-plugin\nuv pip install mkdocs-material\nuv pip install mkdocs-entangled-plugin\n</code></pre>"},{"location":"setup-deploy/mkdocs/#linux-mint","title":"Linux Mint","text":"file: setup/mkdocs.sh<pre><code>uv pip install mkdocs\nuv pip install mkdocs-mermaid2-plugin\nuv pip install mkdocs-material\nuv pip install mkdocs-entangled-plugin\n</code></pre>"},{"location":"setup-deploy/mkdocs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server at http://127.0.0.1:8000/</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs gh-deploy</code> - Deploy site on the gh-pages branch: see site_url in config. </li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"setup-deploy/mkdocs/#configuration","title":"Configuration","text":"file: mkdocs.yml<pre><code>site_name: My Docs\nsite_url: https://s66erge.github.io/entan-mkdocs\nrepo_url: https://github.com/s66erge/entan-mkdocs\n\nplugins:\n  - search\n  - entangled\n  - mermaid2:\n      arguments:\n         securityLevel: 'loose' \n\n#extra_javascript:\n#    - https://unpkg.com/mermaid/dist/mermaid.min.js\n\nmarkdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n#         format: !!python/name:mermaid2.fence_mermaid\n\ntheme:\n  name: readthedocs\n  name: material\n  features:\n    - content.code.copy\n  palette: \n    # Palette toggle for light mode\n    #- scheme: default\n    #  toggle:\n    #    icon: material/brightness-7 \n    #    name: Switch to dark mode\n\n    # Palette toggle for dark mode\n    - scheme: slate\n      toggle:\n        icon: material/brightness-4\n        name: Switch to light mode\n\n  watch:\n  - docs\n</code></pre>"},{"location":"setup-deploy/mkdocs/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"setup-deploy/railway/","title":"Railway","text":"<p>Railway is a platform that allows you to deploy applications easily. It provides a simple way to host your applications and manage their deployments.</p>"},{"location":"setup-deploy/railway/#new-instruction-for-this-repo","title":"New instruction for this repo","text":"<p>Railway connected to Github : all changes pushed to Github repo branch 'main' are deployed immediately (+/-) to Railway 'entan-mkdocs', where the 'main.py' file is the entry point.</p>"},{"location":"setup-deploy/railway/#railway-cli-installation","title":"Railway CLI installation","text":"<pre><code>scoop install railway\n</code></pre>"},{"location":"setup-deploy/railway/#using-the-railway-cli","title":"Using the Railway CLI","text":"<p>The Railway CLI is used to:</p> <ol> <li>link the local project to a Railway project:    <pre><code>railway link\n</code></pre></li> <li>run the app localy with the Railway project environment variables:    <pre><code>railway run python main.py\n</code></pre></li> </ol>"},{"location":"setup-deploy/railway/#previous-instructions","title":"Previous instructions","text":""},{"location":"setup-deploy/railway/#setup","title":"Setup","text":"<p>Run the commands below on your local machine. <pre><code>git clone https://github.com/AnswerDotAI/fh-deploy.git\ncd railway\npip install -r requirements.txt\n</code></pre></p>"},{"location":"setup-deploy/railway/#run-the-app-locally","title":"Run the app locally","text":"<pre><code>python main.py\n</code></pre>"},{"location":"setup-deploy/railway/#deploying-to-railway","title":"Deploying to Railway","text":"<ul> <li>create a Railway account and signup to the Hobby plan. </li> <li>install the Railway CLI.</li> <li>run <code>railway login</code> to log in to your Railway account.</li> <li>run <code>fh_railway_deploy YOUR_APP_NAME</code>.</li> </ul> <p>Your app's entry point must be located in a <code>main.py</code> file for this to work.</p>"},{"location":"setup-deploy/railway/#supplementary-info","title":"Supplementary Info.","text":""},{"location":"setup-deploy/railway/#whats-in-fh_railway_deploy","title":"what's in <code>fh_railway_deploy</code>","text":"<p><code>fh_railway_deploy</code> runs the following commands behind the scenes for you:</p> <pre><code>railway init -n &lt;app-name&gt;\nrailway up -c\nrailway domain\nrailway link ...\nrailway volume add -m /app/data\n</code></pre> <p>It handles automatically linking your current app to a railway project, setting up all the environment variables such as the port to listen on and setting up a <code>requirements.txt</code> if you haven't one already.</p>"},{"location":"setup-deploy/railway/#changing-the-start-command-or-sleep-directive-or","title":"Changing the start command or sleep directive or ...","text":"<p>Put a <code>railway.toml</code> file in the top application folder :</p> <pre><code>[build]\nbuilder = \"NIXPACKS\"\n\n[deploy]\nnumReplicas = 1\nsleepApplication = true\nstartCommand = \"uvicorn main:app --host 0.0.0.0 --port $PORT\"\n</code></pre>"},{"location":"setup-deploy/railway/#customizing-your-domain-name","title":"Customizing your Domain Name","text":"<p>Railway automatically assigns your website a unique domain name such as <code>quickdraw-production.up.railway.app</code>. However, if you want to use your own that you've purchased through services like GoDaddy or Squarespace Domains and have users be able to navigate to your site using that domain, you'll need to configure it both in your domain registration service and in Railway. Railway has put together a nice tutorial for setting it up here.</p> <p>Make sure to notice the difference between setting up a regular domain and a subdomain. Regular domains don't have any prefixes before the main site name such as <code>example.com</code> and is setup differently from a subdomain which might look like <code>subdomain.example.com</code>. Make sure to follow your domain registration service's documentation on how to set these types up.</p>"}]}